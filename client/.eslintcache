[{"/root/Documentos/alkemyChallnege/client/src/index.js":"1","/root/Documentos/alkemyChallnege/client/src/reportWebVitals.js":"2","/root/Documentos/alkemyChallnege/client/src/App.js":"3","/root/Documentos/alkemyChallnege/client/src/themes/GlobalTheme.js":"4","/root/Documentos/alkemyChallnege/client/src/components/navBar/Index.js":"5","/root/Documentos/alkemyChallnege/client/src/store/store.js":"6","/root/Documentos/alkemyChallnege/client/src/reducers/index.js":"7","/root/Documentos/alkemyChallnege/client/src/reducers/user.js":"8","/root/Documentos/alkemyChallnege/client/src/actions/user.js":"9","/root/Documentos/alkemyChallnege/client/src/components/login/LogIn.js":"10","/root/Documentos/alkemyChallnege/client/src/components/login/Register.js":"11","/root/Documentos/alkemyChallnege/client/src/components/home/Index.js":"12","/root/Documentos/alkemyChallnege/client/src/components/home/currentBalance.js":"13","/root/Documentos/alkemyChallnege/client/src/components/home/lastMoves.js":"14","/root/Documentos/alkemyChallnege/client/src/reducers/balance.js":"15","/root/Documentos/alkemyChallnege/client/src/actions/balance.js":"16","/root/Documentos/alkemyChallnege/client/src/reducers/transactions.js":"17","/root/Documentos/alkemyChallnege/client/src/actions/transactions.js":"18","/root/Documentos/alkemyChallnege/client/src/components/home/loader.js":"19","/root/Documentos/alkemyChallnege/client/src/components/newTransaction/index.js":"20","/root/Documentos/alkemyChallnege/client/src/components/newTransaction/newTransaction.js":"21","/root/Documentos/alkemyChallnege/client/src/components/home/balanceChart.js":"22","/root/Documentos/alkemyChallnege/client/src/components/history/index.js":"23","/root/Documentos/alkemyChallnege/client/src/components/history/dataCard.js":"24","/root/Documentos/alkemyChallnege/client/src/actions/history.js":"25","/root/Documentos/alkemyChallnege/client/src/reducers/history.js":"26","/root/Documentos/alkemyChallnege/client/src/components/login/logout.js":"27"},{"size":703,"mtime":1609212283126,"results":"28","hashOfConfig":"29"},{"size":362,"mtime":1609161780940,"results":"30","hashOfConfig":"29"},{"size":1320,"mtime":1614307186891,"results":"31","hashOfConfig":"29"},{"size":359,"mtime":1609253344824,"results":"32","hashOfConfig":"29"},{"size":1646,"mtime":1611666198976,"results":"33","hashOfConfig":"29"},{"size":855,"mtime":1609211371866,"results":"34","hashOfConfig":"29"},{"size":229,"mtime":1612140251521,"results":"35","hashOfConfig":"29"},{"size":566,"mtime":1609212120138,"results":"36","hashOfConfig":"29"},{"size":695,"mtime":1614315519976,"results":"37","hashOfConfig":"29"},{"size":4329,"mtime":1614319472612,"results":"38","hashOfConfig":"29"},{"size":6202,"mtime":1609281085780,"results":"39","hashOfConfig":"29"},{"size":6903,"mtime":1614319548624,"results":"40","hashOfConfig":"29"},{"size":3221,"mtime":1614355388702,"results":"41","hashOfConfig":"29"},{"size":4582,"mtime":1612043020671,"results":"42","hashOfConfig":"29"},{"size":797,"mtime":1611582966388,"results":"43","hashOfConfig":"29"},{"size":519,"mtime":1611583266288,"results":"44","hashOfConfig":"29"},{"size":559,"mtime":1610493940760,"results":"45","hashOfConfig":"29"},{"size":371,"mtime":1610489751416,"results":"46","hashOfConfig":"29"},{"size":2549,"mtime":1614320108232,"results":"47","hashOfConfig":"29"},{"size":6767,"mtime":1614318448652,"results":"48","hashOfConfig":"29"},{"size":7180,"mtime":1611233384752,"results":"49","hashOfConfig":"29"},{"size":3109,"mtime":1611667615708,"results":"50","hashOfConfig":"29"},{"size":9910,"mtime":1614317263132,"results":"51","hashOfConfig":"29"},{"size":12377,"mtime":1614301204579,"results":"52","hashOfConfig":"29"},{"size":243,"mtime":1612140162653,"results":"53","hashOfConfig":"29"},{"size":396,"mtime":1612140133905,"results":"54","hashOfConfig":"29"},{"size":2189,"mtime":1614313586932,"results":"55","hashOfConfig":"29"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},"6ejmzm",{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"84","messages":"85","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"58"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97","usedDeprecatedRules":"58"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104","usedDeprecatedRules":"58"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"58"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"116","usedDeprecatedRules":"58"},"/root/Documentos/alkemyChallnege/client/src/index.js",[],["117","118"],"/root/Documentos/alkemyChallnege/client/src/reportWebVitals.js",[],"/root/Documentos/alkemyChallnege/client/src/App.js",[],"/root/Documentos/alkemyChallnege/client/src/themes/GlobalTheme.js",[],"/root/Documentos/alkemyChallnege/client/src/components/navBar/Index.js",[],["119","120"],"/root/Documentos/alkemyChallnege/client/src/store/store.js",[],"/root/Documentos/alkemyChallnege/client/src/reducers/index.js",[],"/root/Documentos/alkemyChallnege/client/src/reducers/user.js",[],"/root/Documentos/alkemyChallnege/client/src/actions/user.js",[],"/root/Documentos/alkemyChallnege/client/src/components/login/LogIn.js",[],"/root/Documentos/alkemyChallnege/client/src/components/login/Register.js",[],"/root/Documentos/alkemyChallnege/client/src/components/home/Index.js",[],"/root/Documentos/alkemyChallnege/client/src/components/home/currentBalance.js",[],"/root/Documentos/alkemyChallnege/client/src/components/home/lastMoves.js",["121","122","123","124"],"import React,{useState,useEffect} from 'react';\nimport {Link} from 'react-router-dom' \nimport {connect} from 'react-redux';\nimport cx from 'clsx';\nimport { makeStyles } from '@material-ui/core/styles';\n//----------Card imports------------------------------------------------------\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport { useContainedCardHeaderStyles } from '@mui-treasury/styles/cardHeader/contained';\nimport { useSoftRiseShadowStyles } from '@mui-treasury/styles/shadow/softRise';\nimport { useFadedShadowStyles } from '@mui-treasury/styles/shadow/faded';\n//--------------Table Imports--------------------------------------------------\nimport Table from '@material-ui/core/Table';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableBody from '@material-ui/core/TableBody';\n\n//------------------------------Other imports----------------------------------------------------------\nimport Button from '@material-ui/core/Button';\nimport AddCircleIcon from '@material-ui/icons/AddCircle';\nimport { Grid } from '@material-ui/core';\n\n\nconst useStyles = makeStyles(({ spacing }) => ({\n  card: {\n    marginTop: 40,\n    borderRadius: spacing(0.5),\n    transition: '0.3s',\n    width: '90%',\n    overflow: 'initial',\n    background: '#ffffff',\n  },\n  content: {\n    paddingTop: 0,\n    textAlign: 'center',\n    overflowX: 'auto',\n    '& table': {\n      marginBottom: 0,\n    }\n  },\n  button: {\n    margin: spacing(1),\n    width:'100%'\n  },\n}));\n\n\nlet rows = [];\n\nfunction createData(fecha,concepto,categoria,monto) {\n  return {fecha,concepto,categoria,monto};\n}\n\nexport function LastMoves(props) {\n\n  useEffect(()=>{\n    populate(props)\n  },[])\n\n\n  const classes = useStyles();\n  const cardHeaderStyles = useContainedCardHeaderStyles();\n  const cardShadowStyles = useSoftRiseShadowStyles({ inactive: true });\n  const cardHeaderShadowStyles = useFadedShadowStyles();\n  const [since,setSince]=useState();\n  const [untill,setUntill]=useState()\n\n\n\n  function populate(props){\n    rows =[]\n    let categorie=''\n    setSince(props.moves[props.moves.length-1].date)\n    setUntill(props.moves[0].date)\n    props.moves.map(item=>{\n      if(rows.includes(item)===false){\n        props.categories.map(cat=>{\n          if (cat.id==item.categoryId){\n            categorie=cat.name\n          }\n        })\n        rows.unshift(\n          createData(\n          item.date,\n          item.concept,\n          categorie,\n          item.amount\n          ))\n        }  \n      })\n    } \n\n   \n  return (\n    <Card className={cx(classes.card, cardShadowStyles.root)}>\n      <CardHeader\n        className={cardHeaderShadowStyles.root}\n        classes={cardHeaderStyles}\n        title={'Ultimos 5 Movimientos'}\n        subheader={'Desde: '+since+' Hasta: '+untill}\n      />\n      <CardContent className={classes.content}>\n        <Table>\n          <TableHead>\n            <TableRow>\n              <TableCell>Fecha</TableCell>\n              <TableCell align=\"left\">Concepto</TableCell>\n              <TableCell align=\"right\">Categoria</TableCell>\n              <TableCell align=\"right\">Monto</TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {rows.map(row => (\n              <TableRow key={row.fecha}>\n                <TableCell component=\"th\" scope=\"row\">\n                  {row.fecha}\n                </TableCell>\n                <TableCell align=\"left\">{row.concepto}</TableCell>\n                <TableCell align=\"right\">{row.categoria}</TableCell>\n                <TableCell align=\"right\">${row.monto}</TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n        <Grid container direction=\"row\" alignItems=\"center\" justify=\"center\" >\n          <Grid item justify={\"right\"} xs={12} sm={3}>\n            <Link to=\"/history\">\n              <Button\n                    variant=\"contained\"\n                    color=\"secondary\"\n                    className={classes.button}\n                    startIcon={<AddCircleIcon/>}\n                  >\n                  Ver Historial \n              </Button>\n            </Link>\n          </Grid>\n        </Grid>\n      </CardContent>\n    </Card>\n  );\n};\n\nconst mapStateToProps = state => {\t\t\n  return {\t\t\n    user: state.user.user,\n    moves:state.moves.moves,\n    categories:state.moves.categories\n  }\t\t\n}\n\nexport default connect(mapStateToProps)(LastMoves);","/root/Documentos/alkemyChallnege/client/src/reducers/balance.js",[],"/root/Documentos/alkemyChallnege/client/src/actions/balance.js",[],"/root/Documentos/alkemyChallnege/client/src/reducers/transactions.js",[],"/root/Documentos/alkemyChallnege/client/src/actions/transactions.js",[],"/root/Documentos/alkemyChallnege/client/src/components/home/loader.js",["125","126"],"import React,{useEffect} from \"react\";\nimport {useHistory} from 'react-router-dom';\nimport Axios from 'axios'\nimport Grid from \"@material-ui/core/Grid\";\nimport { makeStyles } from '@material-ui/core/styles';\nimport {connect} from 'react-redux';\nimport {setCategories,setMoves} from '../../actions/transactions';\nimport {setBalance,setChartData,setChartLabels} from '../../actions/balance';\n\n//------------------Import Components----------------------------------\n\n\nconst useStyles = makeStyles((theme) => ({\n    cards: {\n      minHeight: 50,\n      minWidth:320,\n      display: \"flex\",\n      flexDirection: \"column\",\n      justifyContent: \"center\",\n      alignItems:\"center\",\n      padding: theme.spacing(3),\n      marginBottom: theme.spacing(3),\n      backgroundColor:\"#0077b3\",\n      [theme.breakpoints.up(\"md\")]: {\n        flexDirection: \"row\",\n        justifyContent: \"center\",\n        alignItems: \"flex-start\",\n        marginBottom: theme.spacing(9),\n      },\n    },\n\n  }));\n\nexport function Loader(props) {\n   useEffect(()=>{\n    getBalance(props)\n  },[])\n  const history = useHistory()\n  const styles = useStyles();\n\n    const getBalance = (props)=>{\n     Axios.get('http://localhost:3001/transactions/balance/'+props.user.username+'/5',{withCredentials:true})\n    .then(res=>{\n      console.log(res.data)\n      if(res.data.currentBalance.balance===0){\n        props.setBalance({balance:res.data.currentBalance.balance})\n        props.setCategories(res.data.categories)\n        history.push(\"/home\")\n      }else{\n        let data =[]\n        let labels=[]\n        res.data.dailyBalance.map(item=>{\n          data.unshift(item.balance)\n          labels.unshift(item.date)\n        })\n        props.setMoves(res.data.movements)\n        props.setBalance(res.data.currentBalance)\n        props.setCategories(res.data.categories)\n        props.setChartData(data)\n        props.setChartLabels(labels)\n        history.push(\"/home\")\n      }\n    })\n  }\n\n  return (\n    <Grid container spacing={3} className={styles.cards}>\n\n    </Grid>\n  );\n}\n\nconst mapStateToProps = state => {\t\t\n  return {\t\t\n    user: state.user.user,\n  }\t\t\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    setBalance: (balance)=>dispatch(setBalance(balance)),\n    setMoves: (moves)=>dispatch(setMoves(moves)),\n    setCategories: (categories)=>dispatch(setCategories(categories)),\n    setChartData: (data)=>dispatch(setChartData(data)),\n    setChartLabels:(labels)=>dispatch(setChartLabels(labels))\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Loader);","/root/Documentos/alkemyChallnege/client/src/components/newTransaction/index.js",[],"/root/Documentos/alkemyChallnege/client/src/components/newTransaction/newTransaction.js",[],"/root/Documentos/alkemyChallnege/client/src/components/home/balanceChart.js",["127"],"import React, { PureComponent } from 'react'\nimport Chart from \"chart.js\";\nimport classes from \"./balanceChart.css\";\nimport { green, grey } from '@material-ui/core/colors';\n\nChart.defaults.global.defaultFontFamily = \"'PT Sans', sans-serif\"\n// Chart.defaults.global.legend.display = true;\n// Chart.defaults.global.elements.line.tension = 0;\n\nexport default class LineGraph extends PureComponent {\n    chartRef = React.createRef();\n\n    newChart={}\n    minValue=0\n\n    componentDidMount() {\n\n        this.buildChart();\n    }\n\n    componentDidUpdate() {\n        this.newChart.destroy()\n\n        this.buildChart();\n    }\n\n\n    \n    buildChart = () => {\n        const myChartRef = this.chartRef.current.getContext(\"2d\");\n        const { data,labels} = this.props;\n        let type1={\n                label: \"Saldo ($)\",\n                data: data,\n                yAxisID:'A',\n                type:\"line\",\n                fill:false,\n                borderColor: green[400],\n                backgroundColor:green[400],\n                \n            }\n           \n        \n       this.newChart= new Chart(myChartRef, {\n            \n            data: {\n                //Bring in data\n                labels: labels.length === data.length ? labels : new Array(data.length).fill(\"Data\"),\n                datasets: [\n                    {\n                        label:type1.label,\n                        data: type1.data,\n                        yAxisID:type1.yAxisID,\n                        fill: type1.fill,\n                        type:type1.type,\n                        borderColor:type1.borderColor,\n                        backgroundColor:type1.backgroundColor,\n                        pointRadius: 5\n                    },\n\n                ]\n            },\n            options: {\n                //Customize chart options\n                responsive: true,\n                maintainAspectRatio: false,\n\n                layout: {\n                    padding: {\n                        top: 5,\n                        left: 15,\n                        right: 15,\n                        bottom: 5\n                    }\n                },\n                scales: {\n                    xAxes: [{\n                        gridLines: {\n                            display: true,\n                            drawBorder: false,\n                            offsetGridLines: true\n                        },\n                    }],\n                    yAxes: [{\n                        id:type1.yAxisID,\n                        scaleLabel:{display:true, labelString:type1.label},\n\n                        gridLines: {\n                            display: true,\n                            drawBorder: true\n                        }\n                    \n                    }],\n                    \n                }\n              }\n        });\n    }\n    render() {\n        return (\n            <div className={classes.graphContainer} >\n                <canvas \n                    id=\"myChart\"\n                    ref={this.chartRef}\n                    height='300'\n                />\n            </div>\n        )\n    }\n}","/root/Documentos/alkemyChallnege/client/src/components/history/index.js",[],"/root/Documentos/alkemyChallnege/client/src/components/history/dataCard.js",["128","129","130","131","132","133","134"],"import React,{useState,useEffect} from 'react';\nimport {connect} from 'react-redux';\nimport cx from 'clsx';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport {MenuItem,Button,IconButton,TextField,InputAdornment} from '@material-ui/core';\n\n\n//----------Card imports------------------------------------------------------\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport { useContainedCardHeaderStyles } from '@mui-treasury/styles/cardHeader/contained';\nimport { useSoftRiseShadowStyles } from '@mui-treasury/styles/shadow/softRise';\nimport { useFadedShadowStyles } from '@mui-treasury/styles/shadow/faded';\n//-----------------------------Dialog Imports-------------------------------------------------------------------------\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\n\n//--------------Table Imports--------------------------------------------------\nimport Table from '@material-ui/core/Table';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableBody from '@material-ui/core/TableBody';\nimport TablePagination from '@material-ui/core/TablePagination';\n\n//------------------------------Other imports----------------------------------------------------------\nimport EditIcon from '@material-ui/icons/Edit';\nimport CheckBoxIcon from '@material-ui/icons/CheckBox';\nimport CancelIcon from '@material-ui/icons/Cancel';\n\n\nconst useStyles = makeStyles(({ spacing }) => ({\n  card: {\n    marginTop: 40,\n    borderRadius: spacing(0.5),\n    transition: '0.3s',\n    width: '90%',\n    overflow: 'initial',\n    background: '#ffffff',\n  },\n  content: {\n    paddingTop: 0,\n    textAlign: 'center',\n    overflowX: 'auto',\n    '& table': {\n      marginBottom: 0,\n    }\n  },\n  button: {\n    margin: spacing(1),\n    width:\"80%\"\n  },\n}));\n\nlet historicMoves=[]\nlet rows = [];\nlet moveType=[\"ingreso\", \"egreso\"]\nlet move = {id:\"\",date:\"\",categoryId:\"\",amount:\"\",type:\"\",concept:\"\"}\n\n\nconst columns = [\n  {id: 'fecha', label: 'Fecha', minWidth: 50 },\n  {id: 'concepto', label: 'Concepto', minWidth: 100 },\n  {id: 'categoria', label: 'Categoria', minWidth: 50,align: 'right'},\n  {id: 'monto',label: 'Monto',minWidth: 100,align: 'right'},\n  {id: 'editar',label: 'Editar',minWidth: 50,align: 'right'}\n]\n\nfunction createData(fecha,concepto,categoria,monto,editar) {\n  return {fecha,concepto,categoria,monto,editar};\n}\n\nexport function HistoryTable(props) {\n\n  useEffect(()=>{\n    populate(props)\n  },[props.history])\n\n\n  const classes = useStyles();\n  const cardHeaderStyles = useContainedCardHeaderStyles();\n  const cardShadowStyles = useSoftRiseShadowStyles({ inactive: true });\n  const cardHeaderShadowStyles = useFadedShadowStyles();\n  const [since,setSince]=useState();\n  const [untill,setUntill]=useState()\n  const [open, setOpen] = React.useState(false);\n  const [transaction,setTransaction]=useState({date:\"\",categoryId:\"\",amount:\"\",type:\"\",concept:\"\"})\n\n\n\n  const [page, setPage] = React.useState(0);\n  const [rowsPerPage, setRowsPerPage] = React.useState(5);\n\n  const handleChangePage = (event, newPage) => {\n    setPage(newPage);\n  };\n\n  const handleChangeRowsPerPage = (event) => {\n    setRowsPerPage(+event.target.value);\n    setPage(0);\n  };\n\n  const handleClickOpen = (index) => {\n    \n    move = {\n      id:historicMoves[index].id,\n      date:historicMoves[index].date,\n      categoryId:historicMoves[index].categoryId,\n      amount:historicMoves[index].amount,\n      type:historicMoves[index].type,\n      concept:historicMoves[index].concept}\n\n      props.categories.map(cat=>{\n        if (cat.id==move.categoryId){\n          move.categoryName=cat.name\n        }\n      })\n      setOpen(true);\n  };\n\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  const handleInputChange = function(e) {\n    setTransaction({\n      ...transaction,\n      [e.target.name]:e.target.value\n    })\n    console.log(transaction)\n  }\n\n  const saveOp = function(e){\n\n    let data={}\n    data.id=move.id\n    data.date=transaction.date\n    data.categoryId=transaction.categoryId\n    data.amount=transaction.amount\n    data.type=transaction.type\n    data.concept=transaction.concept\n\n  if(transaction.date===\"\"){\n    data.date=move.date\n  }\n  if(transaction.categoryId===\"\"){\n    data.categoryId=move.categoryId\n  }\n  if(transaction.type===\"\"){\n    data.type=move.type\n  }\n  if(transaction.amount===\"\"){\n    data.amount=move.amount\n  }\n  if(transaction.concept===\"\"){\n    data.concept=move.concept\n  }\n\n\n\n  }\n\n  function populate(props){\n    rows =[]\n    historicMoves = []\n    let categorie=''\n\n    if(props.history.length > 0){\n      historicMoves = props.history\n    }else{\n      historicMoves = props.moves\n    }\n\n    setSince(historicMoves[historicMoves.length-1].date)\n    setUntill(historicMoves[0].date)\n    historicMoves.map(item=>{\n      if(rows.includes(item)===false){\n        props.categories.map(cat=>{\n          if (cat.id==item.categoryId){\n            categorie=cat.name\n          }\n        })\n        rows.unshift(\n          createData(\n          item.date,\n          item.concept,\n          categorie,\n          \"$ \"+ item.amount,\n          <IconButton variant=\"outlined\" onClick={()=>handleClickOpen(historicMoves.indexOf(item))} >\n            <EditIcon color=\"black\" />\n          </IconButton>\n          ))\n        }  \n      })\n    } \n\n   \n  return (\n    \n    <Card className={cx(classes.card, cardShadowStyles.root)}>\n      <CardHeader\n        className={cardHeaderShadowStyles.root}\n        classes={cardHeaderStyles}\n        title={'Historial de Movimientos'}\n        subheader={'Desde: '+since+' Hasta: '+untill}\n      />\n      <CardContent className={classes.content}>\n      <Table>\n          <TableHead>\n            <TableRow>\n              <TableCell>Fecha</TableCell>\n              <TableCell align=\"left\">Concepto</TableCell>\n              <TableCell align=\"right\">Categoria</TableCell>\n              <TableCell align=\"right\">Monto</TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n          {rows.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map((row) => {\n                  return (\n                    <TableRow hover role=\"checkbox\" tabIndex={-1} key={row.code}>\n                      {columns.map((column) => {\n                        const value = row[column.id];\n                        return (\n                          <TableCell key={column.id} align={column.align}>\n                            {column.format && typeof value === 'number' ? column.format(value) : value}\n                          </TableCell>\n                        );\n                      })}\n                    </TableRow>\n                  );\n                })}\n          </TableBody>\n        </Table>\n        <TablePagination\n            rowsPerPageOptions={[5, 10, 25]}\n            component=\"div\"\n            count={rows.length}\n            rowsPerPage={rowsPerPage}\n            page={page}\n            onChangePage={handleChangePage}\n            onChangeRowsPerPage={handleChangeRowsPerPage}\n          />\n          <Dialog \n          open={open} \n          onClose={handleClose} \n          aria-labelledby=\"form-dialog-title\"\n          maxWidth='md'\n          fullWidth\n            >\n            <DialogTitle id=\"form-dialog-title\" style={{backgroundColor:'#bdbdbd'}} >Editar Movimiento</DialogTitle>\n            <DialogContent style={{backgroundColor:'#bdbdbd'}}>\n            <Grid container direction=\"row\" justify=\"space-evenly\" className={classes.grid}>\n          <Grid item  xs={12} sm={3} >\n           <TextField\n              name=\"date\"\n              variant=\"outlined\"\n              required\n              fullWidth\n              id=\"date\"\n              label=\"Fecha \"\n              type=\"date\"\n              placeholder={move.date}\n              InputLabelProps={{\n                                  shrink: true,\n                                }}\n              autoFocus\n              onChange={(e) => handleInputChange(e)}\n              helperText=\"Selecione Fecha de la Operación\"\n            />\n          </Grid>\n          <Grid item  xs={12} sm={3} >\n            <TextField\n                id=\"type\"\n                name=\"type\"\n                select\n                label=\"Tipo de Operacion\"\n                variant=\"outlined\"\n                required\n                fullWidth\n                placeholder={move.type}\n                onChange={(e) => handleInputChange(e)}\n                helperText=\"Seleccione el tipo de Operación\"\n                >\n\n                {moveType.map(item =>{\n                    return <MenuItem value={item}>{item}</MenuItem>   \n                })}\n            </TextField>\n          </Grid>\n          <Grid item  xs={12} sm={3} >\n            <TextField\n                  id=\"categoryId\"\n                  name=\"categoryId\"\n                  select\n                  label=\"Categoria\"\n                  variant=\"outlined\"\n                  required\n                  fullWidth\n                  placeholder={move.categoryId}\n                  onChange={(e) => handleInputChange(e)}\n                  helperText=\"Seleccione la categoria de la Operación\"\n                  >\n                  <MenuItem value={move.categoryId}>{move.categoryName}</MenuItem>\n                  {props.categories.map(item =>{\n                    if(item.name !== move.categoryName){\n                      return <MenuItem value={item.id}>{item.name}</MenuItem>}\n                  })}\n              </TextField>\n          </Grid>\n        </Grid>\n        <Grid container direction=\"row\" justify=\"space-evenly\" className={classes.grid}>\n          <Grid item  xs={12} sm={6} >\n            <TextField\n                id=\"concept\"\n                name=\"concept\"\n                label=\"Concepto\"\n                variant=\"outlined\"\n                required\n                fullWidth\n                placeholder={move.concept}\n                onChange={(e) => handleInputChange(e)}\n                InputProps={{\n                  startAdornment: <InputAdornment position=\"start\">-</InputAdornment>,\n                }}\n                helperText=\"Ingrese el Concepto de la Operación\"\n                >\n            </TextField>\n          </Grid>\n          <Grid item  xs={12} sm={3} >\n            <TextField\n                id=\"amount\"\n                name=\"amount\"\n                label=\"monto\"\n                variant=\"outlined\"\n                InputProps={{\n                  startAdornment: <InputAdornment position=\"start\">$</InputAdornment>,\n                }}\n                required\n                fullWidth\n                placeholder={move.amount}\n                onChange={(e) => handleInputChange(e)}\n                helperText=\"Ingrese el Monto de la Operación\"\n                >\n              </TextField>\n          </Grid>\n        </Grid>\n        </DialogContent>\n        <DialogActions style={{backgroundColor:'#bdbdbd'}} >\n        <Grid container direction=\"row\" justify=\"center\"  className={classes.grid}>\n          <Grid item  xs={12} sm={3} >\n            <Button\n                variant=\"contained\"\n                color=\"secondary\"\n                className={classes.button}\n                startIcon={<CheckBoxIcon/>}\n                onClick={(e)=>saveOp(e)}\n\n              >\n                Aceptar       \n            </Button>\n          </Grid>\n          <Grid item  xs={12} sm={3} >\n            <Button\n                variant=\"contained\"\n                color=\"secondary\"\n                className={classes.button}\n                startIcon={<CancelIcon/>}\n                onClick={()=>handleClose()}\n              >\n                Cancelar\n            </Button>\n          </Grid>\n        </Grid>\n        </DialogActions>\n      </Dialog>  \n      </CardContent>\n    </Card>\n  );\n};\n\nconst mapStateToProps = state => {\t\t\n  return {\t\t\n    user: state.user.user,\n    moves:state.moves.moves,\n    categories:state.moves.categories,\n    history:state.history.history\n  }\t\t\n}\n\nexport default connect(mapStateToProps)(HistoryTable);","/root/Documentos/alkemyChallnege/client/src/actions/history.js",[],"/root/Documentos/alkemyChallnege/client/src/reducers/history.js",[],"/root/Documentos/alkemyChallnege/client/src/components/login/logout.js",["135"],"import React,{useEffect} from \"react\";\nimport {useHistory} from 'react-router-dom';\nimport Axios from 'axios'\nimport Grid from \"@material-ui/core/Grid\";\nimport { makeStyles } from '@material-ui/core/styles';\n//---------------REDUX-----------------------------------------------\nimport {connect} from 'react-redux';\nimport {cleanHistory} from './../../actions/history';\nimport {cleanBalance} from './../../actions/balance';\nimport {cleanMoves} from './../../actions/transactions';\nimport {cleanUser} from './../../actions/user';\n\n//------------------Import Components----------------------------------\n\n\nconst useStyles = makeStyles((theme) => ({\n    cards: {\n      minHeight: 50,\n      minWidth:320,\n      display: \"flex\",\n      flexDirection: \"column\",\n      justifyContent: \"center\",\n      alignItems:\"center\",\n      padding: theme.spacing(3),\n      marginBottom: theme.spacing(3),\n      backgroundColor:\"#0077b3\",\n      [theme.breakpoints.up(\"md\")]: {\n        flexDirection: \"row\",\n        justifyContent: \"center\",\n        alignItems: \"flex-start\",\n        marginBottom: theme.spacing(9),\n      },\n    },\n\n  }));\n\nexport function Loader(props) {\n   useEffect(()=>{\n    logOut()\n    \n  },[])\n  const history = useHistory()\n  const styles = useStyles();\n\n  const logOut = async (e) =>{\n  \n    props.cleanHistory()\n    props.cleanBalance()\n    props.cleanMoves()\n    props.cleanUser()\n    await Axios.get('http://localhost:3001/logout',{withCredentials:true})\n    .then( res=>{\n      sessionAlert()\n    })\n    .catch(err=>{\n      alert(err);\n    })\n    \n    backToStart()\n    \n    \n  }\n\n  const backToStart =() =>{\n    history.push(\"/\")\n  }\n\n  const sessionAlert = () =>{\n    alert(\"Sesión cerrada\")\n  }\n\n\n  return (\n    <Grid container spacing={3} className={styles.cards}>\n\n    </Grid>\n  );\n}\n\nconst mapStateToProps = state => {\t\t\n  return {\t\t\n    user: state.user.user,\n  }\t\t\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    cleanHistory:()=>dispatch(cleanHistory()),\n    cleanBalance:()=>dispatch(cleanBalance()),\n    cleanMoves:()=>dispatch(cleanMoves()),\n    cleanUser:()=>dispatch(cleanUser()),\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Loader);",{"ruleId":"136","replacedBy":"137"},{"ruleId":"138","replacedBy":"139"},{"ruleId":"136","replacedBy":"140"},{"ruleId":"138","replacedBy":"141"},{"ruleId":"142","severity":1,"message":"143","line":60,"column":5,"nodeType":"144","endLine":60,"endColumn":7,"suggestions":"145"},{"ruleId":"146","severity":1,"message":"147","line":77,"column":25,"nodeType":"148","messageId":"149","endLine":77,"endColumn":27},{"ruleId":"146","severity":1,"message":"147","line":79,"column":33,"nodeType":"148","messageId":"149","endLine":79,"endColumn":35},{"ruleId":"150","severity":1,"message":"151","line":80,"column":21,"nodeType":"152","messageId":"153","endLine":80,"endColumn":23},{"ruleId":"142","severity":1,"message":"154","line":37,"column":5,"nodeType":"144","endLine":37,"endColumn":7,"suggestions":"155"},{"ruleId":"146","severity":1,"message":"147","line":52,"column":39,"nodeType":"148","messageId":"149","endLine":52,"endColumn":41},{"ruleId":"156","severity":1,"message":"157","line":4,"column":17,"nodeType":"158","messageId":"159","endLine":4,"endColumn":21},{"ruleId":"142","severity":1,"message":"160","line":81,"column":5,"nodeType":"144","endLine":81,"endColumn":20,"suggestions":"161"},{"ruleId":"146","severity":1,"message":"147","line":117,"column":31,"nodeType":"148","messageId":"149","endLine":117,"endColumn":33},{"ruleId":"150","severity":1,"message":"151","line":118,"column":19,"nodeType":"152","messageId":"153","endLine":118,"endColumn":21},{"ruleId":"146","severity":1,"message":"147","line":181,"column":27,"nodeType":"148","messageId":"149","endLine":181,"endColumn":29},{"ruleId":"146","severity":1,"message":"147","line":183,"column":33,"nodeType":"148","messageId":"149","endLine":183,"endColumn":35},{"ruleId":"150","severity":1,"message":"151","line":184,"column":21,"nodeType":"152","messageId":"153","endLine":184,"endColumn":23},{"ruleId":"146","severity":1,"message":"162","line":309,"column":46,"nodeType":"148","messageId":"163","endLine":309,"endColumn":48},{"ruleId":"142","severity":1,"message":"164","line":41,"column":5,"nodeType":"144","endLine":41,"endColumn":7,"suggestions":"165"},"no-native-reassign",["166"],"no-negated-in-lhs",["167"],["166"],["167"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array.","ArrayExpression",["168"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","React Hook useEffect has missing dependencies: 'getBalance' and 'props'. Either include them or remove the dependency array.",["169"],"no-unused-vars","'grey' is defined but never used.","Identifier","unusedVar","React Hook useEffect has missing dependencies: 'populate' and 'props'. Either include them or remove the dependency array.",["170"],"Array.prototype.map() expects a value to be returned at the end of arrow function.","expectedAtEnd","React Hook useEffect has a missing dependency: 'logOut'. Either include it or remove the dependency array.",["171"],"no-global-assign","no-unsafe-negation",{"desc":"172","fix":"173"},{"desc":"174","fix":"175"},{"desc":"176","fix":"177"},{"desc":"178","fix":"179"},"Update the dependencies array to be: [props]",{"range":"180","text":"181"},"Update the dependencies array to be: [getBalance, props]",{"range":"182","text":"183"},"Update the dependencies array to be: [populate, props, props.history]",{"range":"184","text":"185"},"Update the dependencies array to be: [logOut]",{"range":"186","text":"187"},[1868,1870],"[props]",[1057,1059],"[getBalance, props]",[2839,2854],"[populate, props, props.history]",[1191,1193],"[logOut]"]